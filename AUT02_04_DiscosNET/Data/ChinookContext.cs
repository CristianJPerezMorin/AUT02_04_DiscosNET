// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using AUT02_04_DiscosNET.Models;
using Microsoft.AspNetCore.Identity.EntityFrameworkCore;
using Microsoft.AspNetCore.Identity;

namespace AUT02_04_DiscosNET.Data
{
    public partial class ChinookContext : IdentityDbContext
    {
        public ChinookContext()
        {
        }

        public ChinookContext(DbContextOptions<ChinookContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Album> Albums { get; set; }
        public virtual DbSet<Artist> Artists { get; set; }
        public virtual DbSet<Track> Tracks { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.Entity<Album>(entity =>
            {
                //entity.Property(e => e.AlbumId).ValueGeneratedNever();

                entity.HasOne(d => d.Artist)
                    .WithMany(p => p.Albums)
                    .HasForeignKey(d => d.ArtistId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AlbumArtistId");
            });
/*
            modelBuilder.Entity<Artist>(entity =>
            {
                entity.Property(e => e.ArtistId).ValueGeneratedNever();
            });
*/
            modelBuilder.Entity<Track>(entity =>
            {
                entity.Property(e => e.TrackId).ValueGeneratedNever();

                entity.HasOne(d => d.Album)
                    .WithMany(p => p.Tracks)
                    .HasForeignKey(d => d.AlbumId)
                    .HasConstraintName("FK_TrackAlbumId");
            });

            List<IdentityRole> roles = new List<IdentityRole>
            {
                new IdentityRole
                {
                    Name = "Default",
                    NormalizedName = "DEFAULT"
                },
                new IdentityRole
                {
                    Name = "Manager",
                    NormalizedName = "MANAGER"
                },
                new IdentityRole
                {
                    Name = "Admin",
                    NormalizedName = "ADMIN"
                }
            };
            modelBuilder.Entity<IdentityRole>().HasData(roles);

            List<IdentityUser> users = new List<IdentityUser>
            {
                new IdentityUser
                {
                    UserName = "Manager@disquera.com",
                    Email = "Manager@disquera.com",
                    NormalizedEmail = "MANAGER@DISQUERA.COM",
                    NormalizedUserName = "MANAGER@DISQUERA.COM",
                    EmailConfirmed = true
                },
                new IdentityUser
                {
                    UserName = "Admin@disquera.com",
                    Email = "Admin@disquera.com",
                    NormalizedEmail = "ADMIN@DISQUERA.COM",
                    NormalizedUserName = "ADMIN@DISQUERA.COM",
                    EmailConfirmed = true
                }
            };

            modelBuilder.Entity<IdentityUser>().HasData(users);
            var passwordHasher = new PasswordHasher<IdentityUser>();
            users[0].PasswordHash = passwordHasher.HashPassword(users[0], "managerpass");
            users[1].PasswordHash = passwordHasher.HashPassword(users[1], "adminpass");

            List<IdentityUserRole<string>> userRoles = new List<IdentityUserRole<string>>
            {
                new IdentityUserRole<string>
                {
                    RoleId = roles.Find(r => r.Name == "Admin").Id,
                    UserId = users[1].Id
                },
                new IdentityUserRole<string>
                {
                    RoleId = roles.Find(r => r.Name == "Manager").Id,
                    UserId = users[0].Id
                }
            };

            modelBuilder.Entity<IdentityUserRole<string>>().HasData(userRoles);
        }

        //partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}